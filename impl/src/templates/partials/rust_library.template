{%- if target_name_sanitized != crate_name_sanitized %}
alias(
  name = "{{ crate_name_sanitized }}",
  actual = ":{{ target_name_sanitized }}",
)
{%- endif %}

rust_library(
    name = "{{ target_name_sanitized }}",
    crate_root = "{{ target.path }}",
    crate_type = "{{ target.kind }}",
    edition = "{{ target.edition }}",
    srcs = glob(["**/*.rs"]),
    deps = [
        {%- for dependency in crate.dependencies %}
        "{{dependency.buildable_target}}",
        {%- endfor %}
        {%- for dependency in crate.raze_settings.additional_deps %}
        "{{dependency}}",
        {%- endfor %}
    ],
    rustc_flags = [
        "--cap-lints=allow",
        {%- for flag in crate.raze_settings.additional_flags %}
        "{{flag}}",
        {%- endfor %}
    ] + [
        repository_ctx.read(":{{ crate_name_sanitized }}_cfg_args"),
    ],
#
# TODO: cargo:rustc-cfg=XYZ
#       --> --cfg=XYZ
#
#    rustc_flags.extend(":{{ crate_name_sanitized }}_cfg_args"),

#
# TODO: cargo:rustc-env=XYZ
#       --> rustc_env = [ XYZ, ... ]
#
#   rustc_env = [ ":{{ crate_name_sanitized }}_env_args" ],

#
# TODO: Check for other cargo flags, throw errors maybe?
#

    {%- if crate.build_script_target %}
    out_dir_tar = ":{{ crate_name_sanitized }}_out_dir_outputs.tar.gz",
    {%- endif %}
    {%- if crate.raze_settings.data_attr %}
    data = {{crate.raze_settings.data_attr}},
    {%- endif %}
    version = "{{ crate.pkg_version }}",
    crate_features = [
        {%- for feature in crate.features %}
        "{{feature}}",
        {%- endfor %}
    ],
)
